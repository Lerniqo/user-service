generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core user table for authentication and common fields
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password             String
  role                 UserRole
  fullName             String    @map("full_name")
  
  // Common fields
  isActive             Boolean   @default(true) @map("is_active")
  isVerified           Boolean   @default(false) @map("is_verified")
  profileImage         String?   @map("profile_image")
  verificationCode     String?   @unique @map("verification_code")
  verificationExpires  DateTime? @map("verification_expires")
  passwordResetCode    String?   @unique @map("password_reset_code")
  passwordResetExpires DateTime? @map("password_reset_expires")
  refreshTokens        String[]  @map("refresh_tokens") @db.Text
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relationships
  student              Student?
  teacher              Teacher?
  admin                Admin?

  @@map("users")
}

// Student-specific information
model Student {
  id                  String   @id @default(cuid())
  userId              String   @unique @map("user_id")
  school              String?
  birthday            DateTime
  gradeLevel          Int      @map("grade_level")
  gender              String
  learningGoals       String?  @map("learning_goals") @db.Text
  parentGuardianName  String?  @map("parent_guardian_name")
  relationship        String?
  parentContact       String?  @map("parent_contact")
  addressCity         String?  @map("address_city")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewsWritten  TeacherReview[]

  @@map("students")
}

// Teacher-specific information
model Teacher {
  id                      String   @id @default(cuid())
  userId                  String   @unique @map("user_id")
  birthday                DateTime
  address                 String   @db.Text
  phoneNumber             String   @map("phone_number")
  nationalIdPassport      String   @map("national_id_passport")
  yearsOfExperience       Int      @map("years_of_experience")
  highestEducationLevel   String   @map("highest_education_level")
  qualifications          String?  @db.Text
  shortBio                String?  @map("short_bio") @db.Text
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relationships
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews TeacherReview[]

  @@map("teachers")
}

// Admin-specific information
model Admin {
  id         String   @id @default(cuid())
  userId     String   @unique @map("user_id")
  department String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Teacher Review model for student feedback
model TeacherReview {
  id           String   @id @default(cuid())
  teacherId    String   @map("teacher_id")
  studentId    String   @map("student_id")
  rating       Int      // 1-5 star rating
  comment      String?  @db.Text
  isAnonymous  Boolean  @default(false) @map("is_anonymous")
  isActive     Boolean  @default(true) @map("is_active") // For soft delete
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([teacherId, studentId], name: "one_review_per_student_teacher")
  @@map("teacher_reviews")
}

enum UserRole {
  Student
  Teacher
  Admin
}